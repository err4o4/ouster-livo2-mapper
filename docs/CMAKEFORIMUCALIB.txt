root@ubuntu:/home/catkin_ws# cat src/LiDAR_IMU_Init/CMakeLists.txt
cmake_minimum_required(VERSION 2.8.3)
project(lidar_imu_init)

set(CMAKE_BUILD_TYPE "Release")
add_compile_options(-std=c++14)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -O3 -pthread -fexceptions")

add_definitions(-DROOT_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/\")

message("Current CPU architecture: ${CMAKE_SYSTEM_PROCESSOR}")
if(CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
  include(ProcessorCount)
  ProcessorCount(N)
  message("Processer number:  ${N}")
  if(N GREATER 4)
    add_definitions(-DMP_EN -DMP_PROC_NUM=3)
    message("core for MP: 3")
  elseif(N GREATER 3)
    add_definitions(-DMP_EN -DMP_PROC_NUM=2)
    message("core for MP: 2")
  else()
    add_definitions(-DMP_PROC_NUM=1)
  endif()
else()
  add_definitions(-DMP_PROC_NUM=1)
endif()

# OpenMP (optional)
find_package(OpenMP QUIET)
if(OpenMP_CXX_FOUND)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
endif()

# ---- Python 3 + NumPy (align to system /usr/bin/python3) ----
# Pass -DPython3_EXECUTABLE=/usr/bin/python3 at configure if needed.
find_package(Python3 COMPONENTS Interpreter Development REQUIRED)

# Get NumPy include dir from the chosen interpreter
execute_process(
  COMMAND ${Python3_EXECUTABLE} -c "import sys; import numpy; sys.stdout.write(numpy.get_include())"
  OUTPUT_VARIABLE Python3_NumPy_INCLUDE_DIRS
  ERROR_VARIABLE _np_err
  RESULT_VARIABLE _np_res
)
if(NOT _np_res EQUAL 0 OR Python3_NumPy_INCLUDE_DIRS STREQUAL "")
  message(FATAL_ERROR
    "NumPy not found for Python interpreter: ${Python3_EXECUTABLE}\n"
    "Interpreter error: ${_np_err}\n"
    "Install NumPy for that Python, or pass -DPython3_EXECUTABLE to one that has it.")
endif()

# ---- matplotlib-cpp header (local to this package) ----
# The header lives at LiDAR_IMU_Init/include/matplotlibcpp.h
set(MATPLOTLIB_CPP_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/include")
if(NOT EXISTS "${MATPLOTLIB_CPP_INCLUDE_DIRS}/matplotlibcpp.h")
  message(FATAL_ERROR "matplotlibcpp.h not found at ${MATPLOTLIB_CPP_INCLUDE_DIRS}.")
endif()

# ---- ROS + deps ----
find_package(catkin REQUIRED COMPONENTS
  geometry_msgs
  nav_msgs
  sensor_msgs
  roscpp
  rospy
  std_msgs
  pcl_ros
  tf
  livox_ros_driver
  message_generation
  eigen_conversions
)

find_package(Eigen3 REQUIRED)
find_package(PCL 1.8 REQUIRED)
find_package(Ceres REQUIRED)

message(STATUS "Eigen include dir: ${EIGEN3_INCLUDE_DIR}")
message(STATUS "Python3 executable:        ${Python3_EXECUTABLE}")
message(STATUS "Python3 version:           ${Python3_VERSION}")
message(STATUS "Python3 include dirs:      ${Python3_INCLUDE_DIRS}")
message(STATUS "Python3 libraries:         ${Python3_LIBRARIES}")
message(STATUS "Python3 NumPy include dir: ${Python3_NumPy_INCLUDE_DIRS}")
message(STATUS "matplotlibcpp include dir: ${MATPLOTLIB_CPP_INCLUDE_DIRS}")

add_message_files(FILES Pose6D.msg States.msg)
generate_messages(DEPENDENCIES geometry_msgs)

catkin_package(
  CATKIN_DEPENDS geometry_msgs nav_msgs roscpp rospy std_msgs message_runtime
  DEPENDS EIGEN3 PCL
  INCLUDE_DIRS
)

include_directories(
  ../../devel/include
  ${catkin_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIR}
  ${PCL_INCLUDE_DIRS}
  ${Python3_INCLUDE_DIRS}
  ${Python3_NumPy_INCLUDE_DIRS}
  ${MATPLOTLIB_CPP_INCLUDE_DIRS}
  include
)

add_executable(li_init
  src/laserMapping.cpp
  include/ikd-Tree/ikd_Tree.cpp
  include/LI_init/LI_init.cpp
  src/preprocess.cpp
)

target_link_libraries(li_init
  ${catkin_LIBRARIES}
  ${PCL_LIBRARIES}
  ${Python3_LIBRARIES}
  ${CERES_LIBRARIES}
)

target_include_directories(li_init PRIVATE
  ${Python3_INCLUDE_DIRS}
  ${Python3_NumPy_INCLUDE_DIRS}
  ${MATPLOTLIB_CPP_INCLUDE_DIRS}
)
# If you don't need NumPy features from matplotlib-cpp, optionally:
# add_definitions(-DWITHOUT_NUMPY)